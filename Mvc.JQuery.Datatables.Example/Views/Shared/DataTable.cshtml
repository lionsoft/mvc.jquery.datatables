@using System.Linq
@using Mvc.JQuery.Datatables

@model DataTableConfigVm

<table id="@Model.Id" class="display @(Model.TableClass ?? DataTableConfigVm.DefaultTableClass ?? "")" >
    <thead>
        @if (Model.ColumnFilter)
        {
            <tr>
                @foreach (var column in Model.Columns)
                {
                    <th>@column.DisplayName</th>
                }
            </tr>
        }
        @if (!Model.HideHeaders)
        {
            <tr>
                @foreach (var column in Model.Columns)
                {
                    <th>@column.DisplayName</th>
                }
            </tr>
        }
    </thead>
    <tbody>
        <tr>
            <td colspan="@Model.Columns.Count()" class="dataTables_empty">Loading data from server</td>
        </tr>
    </tbody>
</table>

<script type="text/javascript">
    (function setDataTable() {
        if(!window.jQuery || !$.fn.DataTable) {
            setTimeout(setDataTable, 100);
            return;
        }
        var $table = $('#@Model.Id');

        // New format
        @if (!Model.UseLegacyFormat)
        {
            <text>
            var dt = $table.dataTable({

                "ordering": @Html.Raw(Model.ColumnSortingString),
                "processing": true,
                "stateSave": @Html.Raw(Model.StateSave ? "true" : "false"),
                "searching": @Model.ShowSearch.ToString().ToLower(),
                "dom": '@Html.Raw(Model.Dom)',
                "lengthMenu": [[5, 10, 25, 50, -1], [5, 10, 25, 50, "All"]],
                "autoWidth": @Model.AutoWidth.ToString().ToLowerInvariant(),


                "serverSide": true,
                "ajax": "@Html.Raw(Model.AjaxUrl)",

                @Html.Raw(Model.TableTools ? "\"oTableTools\" : { \"sSwfPath\": \"//cdn.datatables.net/tabletools/2.2.1/swf/copy_csv_xls_pdf.swf\" }," : "")


                @if (!Model.UseDataArray)
                {
                <text>
                "columns": [
                    @foreach (var column in Model.Columns)
                    {
                    <text>{ data: "@column.Name", name: "@column.Name", title: "@column.DisplayName" },</text>
                    }
                ],
                </text>
                }

                "columnDefs" : @Html.Raw(Model.ColumnDefsString)

                @Html.Raw(!string.IsNullOrWhiteSpace(Model.JsOptionsString) ? ", " + Model.JsOptionsString : "")

                @if (!string.IsNullOrEmpty(Model.Language))
                {
                <text>
                ,"language": @Html.Raw(@Model.Language)
                </text>
                }

                @if (!string.IsNullOrEmpty(Model.DrawCallback))
                {
                <text>
                ,"drawCallback": @Html.Raw(Model.DrawCallback)
                </text>
                }
            });
            </text>
        }
        else {
            <text>
            var dt = $table.dataTable({
                "aaSorting": @Html.Raw(Model.ColumnSortingString),
                "bProcessing": true,
                "bStateSave": @Html.Raw(Model.StateSave ? "true" : "false"),
                "bServerSide": true,
                "bFilter": @Model.ShowSearch.ToString().ToLower(),
                "sDom": '@Html.Raw(Model.Dom)',
                "aLengthMenu": [[5, 10, 25, 50, -1], [5, 10, 25, 50, "All"]],
                "bAutoWidth": @Model.AutoWidth.ToString().ToLowerInvariant(),

                "sAjaxSource": "@Html.Raw(Model.AjaxUrl)",

                @Html.Raw(Model.TableTools ? "\"oTableTools\" : { \"sSwfPath\": \"//cdn.datatables.net/tabletools/2.2.1/swf/copy_csv_xls_pdf.swf\" }," : "")


                "fnServerData": function(sSource, aoData, fnCallback) {
                    $.ajax({
                        "dataType": 'json',
                        "type": "POST",
                        "url": sSource,
                        "data": aoData,
                        "success": fnCallback
                    });
                },

                @if (!Model.UseDataArray)
                {
                <text>
                "aoColumns": [
                    @foreach (var column in Model.Columns)
                    {
                    <text>{ mData: "@column.Name", sName: "@column.Name", sTitle: "@column.DisplayName" },</text>
                    }
                ],
                </text>
                }

                "aoColumnDefs" : @Html.Raw(Model.ColumnDefsString)

                @Html.Raw(!string.IsNullOrWhiteSpace(Model.JsOptionsString) ? ", " + Model.JsOptionsString : "")

                @if (!string.IsNullOrEmpty(Model.Language))
                {
                <text>
                ,"oLanguage": @Html.Raw(@Model.Language)
                </text>
                }

                @if (!string.IsNullOrEmpty(Model.DrawCallback))
                {
                <text>
                ,"fnDrawCallback": @Html.Raw(Model.DrawCallback)
                </text>
                }
                });

            @if (Model.ColumnFilter)
            {
            <text>
            dt.columnFilter(@Html.Raw(Model.ColumnFilterVm.ToString()));
            </text>
            }
            </text>
        }
    })();

</script>

